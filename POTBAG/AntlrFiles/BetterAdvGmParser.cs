//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BetterAdvGm.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class BetterAdvGmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, KEYWORD_TEXT=2, KEYWORD_STRING=3, END_STMT=4, STRING=5, 
		TRAVEL_KEYWORD=6, INCREMENT=7, CURLY_LEFT=8, CURLY_RIGHT=9, PAREN_LEFT=10, 
		PAREN_RIGHT=11, SQUARE_LEFT=12, SQUARE_RIGHT=13, KEYWORD_INPUT=14, KEYWORD_INT=15, 
		KEYWORD_IF=16, KEYWORD_ELSE=17, KEYWORD_ELSEIF=18, KEYWORD_WHILE=19, KEYWORD_FOR=20, 
		KEYWORD_LOCATION=21, KEYWORD_SETUP=22, KEYWORD_LOCATIONARRAY=23, KEYWORD_LOCATIONS=24, 
		KEYWORD_CHOICE=25, COMMA_SEPERATOR=26, BOOL_CMP_OPERATOR=27, CMP_OPERATOR=28, 
		ASSIGN_OPERATOR=29, COMPOUND_OPERATOR=30, TIMES_OPERATOR=31, DIVISION_OPERATOR=32, 
		PLUS_OPERATOR=33, MINUS_OPERATOR=34, ARROW_OPERATOR=35, AND_OPERATOR=36, 
		OR_OPERATOR=37, BOOL=38, NUM=39, VAR_NAME=40;
	public const int
		RULE_prog = 0, RULE_buffernode = 1, RULE_setup = 2, RULE_locationsetup = 3, 
		RULE_locationmapping = 4, RULE_inBlock = 5, RULE_expression = 6, RULE_statement = 7, 
		RULE_assign = 8, RULE_declaration = 9, RULE_text_statement = 10, RULE_input_statement = 11, 
		RULE_if_chain_statement = 12, RULE_if_statement = 13, RULE_else_if_statement = 14, 
		RULE_else_statement = 15, RULE_travel_statement = 16, RULE_choice_statement = 17, 
		RULE_option_statment = 18, RULE_int_assign = 19, RULE_string_assign = 20, 
		RULE_input_assign = 21, RULE_location_assign = 22, RULE_int_declaration = 23, 
		RULE_string_declaration = 24, RULE_location_declaration = 25, RULE_predicate = 26, 
		RULE_variable = 27, RULE_string_obj = 28, RULE_bool_obj = 29;
	public static readonly string[] ruleNames = {
		"prog", "buffernode", "setup", "locationsetup", "locationmapping", "inBlock", 
		"expression", "statement", "assign", "declaration", "text_statement", 
		"input_statement", "if_chain_statement", "if_statement", "else_if_statement", 
		"else_statement", "travel_statement", "choice_statement", "option_statment", 
		"int_assign", "string_assign", "input_assign", "location_assign", "int_declaration", 
		"string_declaration", "location_declaration", "predicate", "variable", 
		"string_obj", "bool_obj"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'Text '", "'string '", "';'", null, "'Travel '", "'++'", 
		"'{'", "'}'", "'('", "')'", "'['", "']'", "'userInput'", "'int'", "'if'", 
		"'else'", "'else if'", "'while'", "'for'", "'Location'", "'setup'", "'LocationArray'", 
		"'Locations'", "'choice'", "','", null, null, "'='", "'+='", "'*'", "'/'", 
		"'+'", "'-'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "KEYWORD_TEXT", "KEYWORD_STRING", "END_STMT", "STRING", 
		"TRAVEL_KEYWORD", "INCREMENT", "CURLY_LEFT", "CURLY_RIGHT", "PAREN_LEFT", 
		"PAREN_RIGHT", "SQUARE_LEFT", "SQUARE_RIGHT", "KEYWORD_INPUT", "KEYWORD_INT", 
		"KEYWORD_IF", "KEYWORD_ELSE", "KEYWORD_ELSEIF", "KEYWORD_WHILE", "KEYWORD_FOR", 
		"KEYWORD_LOCATION", "KEYWORD_SETUP", "KEYWORD_LOCATIONARRAY", "KEYWORD_LOCATIONS", 
		"KEYWORD_CHOICE", "COMMA_SEPERATOR", "BOOL_CMP_OPERATOR", "CMP_OPERATOR", 
		"ASSIGN_OPERATOR", "COMPOUND_OPERATOR", "TIMES_OPERATOR", "DIVISION_OPERATOR", 
		"PLUS_OPERATOR", "MINUS_OPERATOR", "ARROW_OPERATOR", "AND_OPERATOR", "OR_OPERATOR", 
		"BOOL", "NUM", "VAR_NAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BetterAdvGm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BetterAdvGmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BetterAdvGmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BetterAdvGmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public BuffernodeContext buffernode() {
			return GetRuleContext<BuffernodeContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(BetterAdvGmParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; buffernode();
			State = 61; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuffernodeContext : ParserRuleContext {
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public BuffernodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buffernode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterBuffernode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitBuffernode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuffernode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuffernodeContext buffernode() {
		BuffernodeContext _localctx = new BuffernodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_buffernode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; setup();
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0)) {
				{
				{
				State = 64; inBlock();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode KEYWORD_SETUP() { return GetToken(BetterAdvGmParser.KEYWORD_SETUP, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public LocationsetupContext locationsetup() {
			return GetRuleContext<LocationsetupContext>(0);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(KEYWORD_SETUP);
			State = 71; Match(CURLY_LEFT);
			{
			State = 72; locationsetup();
			}
			State = 73; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationsetupContext : ParserRuleContext {
		public ITerminalNode KEYWORD_LOCATIONS() { return GetToken(BetterAdvGmParser.KEYWORD_LOCATIONS, 0); }
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public LocationmappingContext[] locationmapping() {
			return GetRuleContexts<LocationmappingContext>();
		}
		public LocationmappingContext locationmapping(int i) {
			return GetRuleContext<LocationmappingContext>(i);
		}
		public LocationsetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationsetup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterLocationsetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitLocationsetup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationsetup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationsetupContext locationsetup() {
		LocationsetupContext _localctx = new LocationsetupContext(Context, State);
		EnterRule(_localctx, 6, RULE_locationsetup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(KEYWORD_LOCATIONS);
			State = 76; Match(ASSIGN_OPERATOR);
			State = 77; Match(CURLY_LEFT);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 78; locationmapping();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VAR_NAME );
			State = 83; Match(CURLY_RIGHT);
			State = 84; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationmappingContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode ARROW_OPERATOR() { return GetToken(BetterAdvGmParser.ARROW_OPERATOR, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public ITerminalNode[] COMMA_SEPERATOR() { return GetTokens(BetterAdvGmParser.COMMA_SEPERATOR); }
		public ITerminalNode COMMA_SEPERATOR(int i) {
			return GetToken(BetterAdvGmParser.COMMA_SEPERATOR, i);
		}
		public LocationmappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationmapping; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterLocationmapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitLocationmapping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationmapping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationmappingContext locationmapping() {
		LocationmappingContext _localctx = new LocationmappingContext(Context, State);
		EnterRule(_localctx, 8, RULE_locationmapping);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; variable();
			State = 87; Match(ARROW_OPERATOR);
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 88; variable();
					State = 89; Match(COMMA_SEPERATOR);
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 96; variable();
			State = 97; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InBlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InBlockContext inBlock() {
		InBlockContext _localctx = new InBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_inBlock);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; assign();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 102; declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode PAREN_LEFT() { return GetToken(BetterAdvGmParser.PAREN_LEFT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(BetterAdvGmParser.PAREN_RIGHT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode NUM() { return GetToken(BetterAdvGmParser.NUM, 0); }
		public ITerminalNode TIMES_OPERATOR() { return GetToken(BetterAdvGmParser.TIMES_OPERATOR, 0); }
		public ITerminalNode DIVISION_OPERATOR() { return GetToken(BetterAdvGmParser.DIVISION_OPERATOR, 0); }
		public ITerminalNode PLUS_OPERATOR() { return GetToken(BetterAdvGmParser.PLUS_OPERATOR, 0); }
		public ITerminalNode MINUS_OPERATOR() { return GetToken(BetterAdvGmParser.MINUS_OPERATOR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAREN_LEFT:
				{
				State = 106; Match(PAREN_LEFT);
				State = 107; expression(0);
				State = 108; Match(PAREN_RIGHT);
				}
				break;
			case VAR_NAME:
				{
				State = 110; variable();
				}
				break;
			case NUM:
				{
				State = 111; Match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 122;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 120;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 114;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 115;
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES_OPERATOR || _la==DIVISION_OPERATOR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 116; expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 117;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 118;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 119; expression(5);
						}
						break;
					}
					} 
				}
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Text_statementContext text_statement() {
			return GetRuleContext<Text_statementContext>(0);
		}
		public Input_statementContext input_statement() {
			return GetRuleContext<Input_statementContext>(0);
		}
		public If_chain_statementContext if_chain_statement() {
			return GetRuleContext<If_chain_statementContext>(0);
		}
		public Travel_statementContext travel_statement() {
			return GetRuleContext<Travel_statementContext>(0);
		}
		public Choice_statementContext choice_statement() {
			return GetRuleContext<Choice_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; text_statement();
				}
				break;
			case KEYWORD_INPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; input_statement();
				}
				break;
			case KEYWORD_IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; if_chain_statement();
				}
				break;
			case TRAVEL_KEYWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 128; travel_statement();
				}
				break;
			case KEYWORD_CHOICE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 129; choice_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public Int_assignContext int_assign() {
			return GetRuleContext<Int_assignContext>(0);
		}
		public String_assignContext string_assign() {
			return GetRuleContext<String_assignContext>(0);
		}
		public Input_assignContext input_assign() {
			return GetRuleContext<Input_assignContext>(0);
		}
		public Location_assignContext location_assign() {
			return GetRuleContext<Location_assignContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 16, RULE_assign);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; int_assign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; string_assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134; input_assign();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135; location_assign();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Int_declarationContext int_declaration() {
			return GetRuleContext<Int_declarationContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public String_declarationContext string_declaration() {
			return GetRuleContext<String_declarationContext>(0);
		}
		public Location_declarationContext location_declaration() {
			return GetRuleContext<Location_declarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138; int_declaration();
				State = 139; Match(END_STMT);
				}
				break;
			case KEYWORD_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141; string_declaration();
				State = 142; Match(END_STMT);
				}
				break;
			case KEYWORD_LOCATION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 144; location_declaration();
				State = 145; Match(END_STMT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_TEXT() { return GetToken(BetterAdvGmParser.KEYWORD_TEXT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public String_objContext[] string_obj() {
			return GetRuleContexts<String_objContext>();
		}
		public String_objContext string_obj(int i) {
			return GetRuleContext<String_objContext>(i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] PLUS_OPERATOR() { return GetTokens(BetterAdvGmParser.PLUS_OPERATOR); }
		public ITerminalNode PLUS_OPERATOR(int i) {
			return GetToken(BetterAdvGmParser.PLUS_OPERATOR, i);
		}
		public Text_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterText_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitText_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Text_statementContext text_statement() {
		Text_statementContext _localctx = new Text_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_text_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(KEYWORD_TEXT);
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 152;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 150; string_obj();
						}
						break;
					case VAR_NAME:
						{
						State = 151; variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 154; Match(PLUS_OPERATOR);
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 161; string_obj();
				}
				break;
			case VAR_NAME:
				{
				State = 162; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 165; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_INPUT() { return GetToken(BetterAdvGmParser.KEYWORD_INPUT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public String_objContext[] string_obj() {
			return GetRuleContexts<String_objContext>();
		}
		public String_objContext string_obj(int i) {
			return GetRuleContext<String_objContext>(i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] PLUS_OPERATOR() { return GetTokens(BetterAdvGmParser.PLUS_OPERATOR); }
		public ITerminalNode PLUS_OPERATOR(int i) {
			return GetToken(BetterAdvGmParser.PLUS_OPERATOR, i);
		}
		public Input_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInput_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInput_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_statementContext input_statement() {
		Input_statementContext _localctx = new Input_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_input_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(KEYWORD_INPUT);
			State = 176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 170;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 168; string_obj();
						}
						break;
					case VAR_NAME:
						{
						State = 169; variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 172; Match(PLUS_OPERATOR);
					}
					} 
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 179; string_obj();
				}
				break;
			case VAR_NAME:
				{
				State = 180; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 183; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_chain_statementContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Else_if_statementContext[] else_if_statement() {
			return GetRuleContexts<Else_if_statementContext>();
		}
		public Else_if_statementContext else_if_statement(int i) {
			return GetRuleContext<Else_if_statementContext>(i);
		}
		public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public If_chain_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_chain_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterIf_chain_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitIf_chain_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_chain_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_chain_statementContext if_chain_statement() {
		If_chain_statementContext _localctx = new If_chain_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_if_chain_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; if_statement();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEYWORD_ELSEIF) {
				{
				{
				State = 186; else_if_statement();
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 192; else_statement();
				}
			}

			State = 195; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_IF() { return GetToken(BetterAdvGmParser.KEYWORD_IF, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(BetterAdvGmParser.PAREN_LEFT, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(BetterAdvGmParser.PAREN_RIGHT, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(KEYWORD_IF);
			State = 198; Match(PAREN_LEFT);
			State = 199; predicate(0);
			State = 200; Match(PAREN_RIGHT);
			State = 201; Match(CURLY_LEFT);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 202; inBlock();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 207; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_ELSEIF() { return GetToken(BetterAdvGmParser.KEYWORD_ELSEIF, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(BetterAdvGmParser.PAREN_LEFT, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(BetterAdvGmParser.PAREN_RIGHT, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public Else_if_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterElse_if_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitElse_if_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statementContext else_if_statement() {
		Else_if_statementContext _localctx = new Else_if_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_else_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(KEYWORD_ELSEIF);
			State = 210; Match(PAREN_LEFT);
			State = 211; predicate(0);
			State = 212; Match(PAREN_RIGHT);
			State = 213; Match(CURLY_LEFT);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 214; inBlock();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 219; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_ELSE() { return GetToken(BetterAdvGmParser.KEYWORD_ELSE, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_else_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(KEYWORD_ELSE);
			State = 222; Match(CURLY_LEFT);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 223; inBlock();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 228; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Travel_statementContext : ParserRuleContext {
		public ITerminalNode TRAVEL_KEYWORD() { return GetToken(BetterAdvGmParser.TRAVEL_KEYWORD, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Travel_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_travel_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterTravel_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitTravel_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTravel_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Travel_statementContext travel_statement() {
		Travel_statementContext _localctx = new Travel_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_travel_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(TRAVEL_KEYWORD);
			State = 231; variable();
			State = 232; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_CHOICE() { return GetToken(BetterAdvGmParser.KEYWORD_CHOICE, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Option_statmentContext[] option_statment() {
			return GetRuleContexts<Option_statmentContext>();
		}
		public Option_statmentContext option_statment(int i) {
			return GetRuleContext<Option_statmentContext>(i);
		}
		public Choice_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterChoice_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitChoice_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_statementContext choice_statement() {
		Choice_statementContext _localctx = new Choice_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_choice_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(KEYWORD_CHOICE);
			State = 235; Match(CURLY_LEFT);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 236; option_statment();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING || _la==VAR_NAME );
			State = 241; Match(CURLY_RIGHT);
			State = 242; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_statmentContext : ParserRuleContext {
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public String_objContext string_obj() {
			return GetRuleContext<String_objContext>(0);
		}
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public Option_statmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_statment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterOption_statment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitOption_statment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_statment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_statmentContext option_statment() {
		Option_statmentContext _localctx = new Option_statmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_option_statment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_NAME:
				{
				State = 244; variable();
				}
				break;
			case STRING:
				{
				State = 245; string_obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 248; Match(CURLY_LEFT);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 249; inBlock();
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 254; Match(CURLY_RIGHT);
			State = 255; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Int_declarationContext int_declaration() {
			return GetRuleContext<Int_declarationContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public Input_statementContext input_statement() {
			return GetRuleContext<Input_statementContext>(0);
		}
		public ITerminalNode COMPOUND_OPERATOR() { return GetToken(BetterAdvGmParser.COMPOUND_OPERATOR, 0); }
		public Int_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInt_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInt_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_assignContext int_assign() {
		Int_assignContext _localctx = new Int_assignContext(Context, State);
		EnterRule(_localctx, 38, RULE_int_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 257; variable();
				State = 258;
				_la = TokenStream.LA(1);
				if ( !(_la==ASSIGN_OPERATOR || _la==COMPOUND_OPERATOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 259; expression(0);
				State = 260; Match(END_STMT);
				}
				break;
			case 2:
				{
				State = 262; int_declaration();
				State = 263; Match(ASSIGN_OPERATOR);
				State = 264; expression(0);
				State = 265; Match(END_STMT);
				}
				break;
			case 3:
				{
				State = 267; int_declaration();
				State = 268; Match(ASSIGN_OPERATOR);
				State = 269; input_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public String_objContext string_obj() {
			return GetRuleContext<String_objContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public String_declarationContext string_declaration() {
			return GetRuleContext<String_declarationContext>(0);
		}
		public String_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterString_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitString_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_assignContext string_assign() {
		String_assignContext _localctx = new String_assignContext(Context, State);
		EnterRule(_localctx, 40, RULE_string_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_NAME:
				{
				State = 273; variable();
				State = 274; Match(ASSIGN_OPERATOR);
				State = 275; string_obj();
				State = 276; Match(END_STMT);
				}
				break;
			case KEYWORD_STRING:
				{
				State = 278; string_declaration();
				State = 279; Match(ASSIGN_OPERATOR);
				State = 280; string_obj();
				State = 281; Match(END_STMT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public Input_statementContext input_statement() {
			return GetRuleContext<Input_statementContext>(0);
		}
		public String_declarationContext string_declaration() {
			return GetRuleContext<String_declarationContext>(0);
		}
		public Input_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInput_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInput_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_assignContext input_assign() {
		Input_assignContext _localctx = new Input_assignContext(Context, State);
		EnterRule(_localctx, 42, RULE_input_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_NAME:
				{
				State = 285; variable();
				State = 286; Match(ASSIGN_OPERATOR);
				State = 287; input_statement();
				}
				break;
			case KEYWORD_STRING:
				{
				State = 289; string_declaration();
				State = 290; Match(ASSIGN_OPERATOR);
				State = 291; input_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Location_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Location_declarationContext location_declaration() {
			return GetRuleContext<Location_declarationContext>(0);
		}
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public Location_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterLocation_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitLocation_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Location_assignContext location_assign() {
		Location_assignContext _localctx = new Location_assignContext(Context, State);
		EnterRule(_localctx, 44, RULE_location_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_NAME:
				{
				State = 295; variable();
				State = 296; Match(ASSIGN_OPERATOR);
				State = 297; Match(CURLY_LEFT);
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0)) {
					{
					{
					State = 298; inBlock();
					}
					}
					State = 303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 304; Match(CURLY_RIGHT);
				State = 305; Match(END_STMT);
				}
				break;
			case KEYWORD_LOCATION:
				{
				State = 307; location_declaration();
				State = 308; Match(ASSIGN_OPERATOR);
				State = 309; Match(CURLY_LEFT);
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0)) {
					{
					{
					State = 310; inBlock();
					}
					}
					State = 315;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 316; Match(CURLY_RIGHT);
				State = 317; Match(END_STMT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_declarationContext : ParserRuleContext {
		public ITerminalNode KEYWORD_INT() { return GetToken(BetterAdvGmParser.KEYWORD_INT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Int_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInt_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInt_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_declarationContext int_declaration() {
		Int_declarationContext _localctx = new Int_declarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_int_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(KEYWORD_INT);
			State = 322; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_declarationContext : ParserRuleContext {
		public ITerminalNode KEYWORD_STRING() { return GetToken(BetterAdvGmParser.KEYWORD_STRING, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public String_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterString_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitString_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_declarationContext string_declaration() {
		String_declarationContext _localctx = new String_declarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_string_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(KEYWORD_STRING);
			State = 325; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Location_declarationContext : ParserRuleContext {
		public ITerminalNode KEYWORD_LOCATION() { return GetToken(BetterAdvGmParser.KEYWORD_LOCATION, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Location_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterLocation_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitLocation_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Location_declarationContext location_declaration() {
		Location_declarationContext _localctx = new Location_declarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_location_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(KEYWORD_LOCATION);
			State = 328; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode BOOL_CMP_OPERATOR() { return GetToken(BetterAdvGmParser.BOOL_CMP_OPERATOR, 0); }
		public String_objContext string_obj() {
			return GetRuleContext<String_objContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CMP_OPERATOR() { return GetToken(BetterAdvGmParser.CMP_OPERATOR, 0); }
		public Bool_objContext bool_obj() {
			return GetRuleContext<Bool_objContext>(0);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode AND_OPERATOR() { return GetToken(BetterAdvGmParser.AND_OPERATOR, 0); }
		public ITerminalNode OR_OPERATOR() { return GetToken(BetterAdvGmParser.OR_OPERATOR, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 355;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 331; variable();
					State = 332; Match(BOOL_CMP_OPERATOR);
					State = 333; string_obj();
					}
					break;
				case 2:
					{
					State = 335; string_obj();
					State = 336; Match(BOOL_CMP_OPERATOR);
					State = 337; variable();
					}
					break;
				case 3:
					{
					State = 339; variable();
					State = 340;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOL_CMP_OPERATOR || _la==CMP_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 341; variable();
					}
					break;
				case 4:
					{
					State = 343; variable();
					State = 344;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOL_CMP_OPERATOR || _la==CMP_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 345; expression(0);
					}
					break;
				case 5:
					{
					State = 347; expression(0);
					State = 348;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOL_CMP_OPERATOR || _la==CMP_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 349; variable();
					}
					break;
				case 6:
					{
					State = 351; expression(0);
					State = 352;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOL_CMP_OPERATOR || _la==CMP_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 353; expression(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 357; variable();
				State = 358; Match(BOOL_CMP_OPERATOR);
				State = 359; bool_obj();
				}
				break;
			case 3:
				{
				State = 361; bool_obj();
				State = 362; Match(BOOL_CMP_OPERATOR);
				State = 363; variable();
				}
				break;
			case 4:
				{
				State = 365; variable();
				}
				break;
			case 5:
				{
				State = 366; bool_obj();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 374;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PredicateContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_predicate);
					State = 369;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 370;
					_la = TokenStream.LA(1);
					if ( !(_la==AND_OPERATOR || _la==OR_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 371; predicate(6);
					}
					} 
				}
				State = 376;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VAR_NAME() { return GetToken(BetterAdvGmParser.VAR_NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 54, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(VAR_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_objContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(BetterAdvGmParser.STRING, 0); }
		public String_objContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterString_obj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitString_obj(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_obj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_objContext string_obj() {
		String_objContext _localctx = new String_objContext(Context, State);
		EnterRule(_localctx, 56, RULE_string_obj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_objContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(BetterAdvGmParser.BOOL, 0); }
		public Bool_objContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterBool_obj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitBool_obj(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_obj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_objContext bool_obj() {
		Bool_objContext _localctx = new Bool_objContext(Context, State);
		EnterRule(_localctx, 58, RULE_bool_obj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 26: return predicate_sempred((PredicateContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x182', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x44', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'G', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 'R', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', 'S', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '^', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x61', 
		'\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'j', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 's', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '{', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '~', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x85', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8B', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x96', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x9B', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x9F', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\xA2', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\xA6', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xAD', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\xB1', '\n', '\r', '\f', '\r', '\xE', '\r', '\xB4', 
		'\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB8', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xBE', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xC1', '\v', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xC4', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x6', '\xF', '\xCE', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\xCF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\xDA', '\n', 
		'\x10', '\r', '\x10', '\xE', '\x10', '\xDB', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', '\xE3', '\n', 
		'\x11', '\r', '\x11', '\xE', '\x11', '\xE4', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x6', '\x13', '\xF0', '\n', '\x13', '\r', 
		'\x13', '\xE', '\x13', '\xF1', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xF9', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x6', '\x14', '\xFD', '\n', '\x14', '\r', '\x14', 
		'\xE', '\x14', '\xFE', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x112', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x11E', '\n', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x128', '\n', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x12E', '\n', 
		'\x18', '\f', '\x18', '\xE', '\x18', '\x131', '\v', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\x13A', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\x13D', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x142', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x166', '\n', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x172', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x177', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x17A', '\v', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x2', '\x4', '\xE', '\x36', ' ', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '\x2', '\a', 
		'\x3', '\x2', '!', '\"', '\x3', '\x2', '#', '$', '\x3', '\x2', '\x1F', 
		' ', '\x3', '\x2', '\x1D', '\x1E', '\x3', '\x2', '&', '\'', '\x2', '\x195', 
		'\x2', '>', '\x3', '\x2', '\x2', '\x2', '\x4', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'H', '\x3', '\x2', '\x2', '\x2', '\b', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'X', '\x3', '\x2', '\x2', '\x2', '\f', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'r', '\x3', '\x2', '\x2', '\x2', '\x10', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x95', '\x3', '\x2', '\x2', '\x2', '\x16', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xD3', '\x3', '\x2', '\x2', '\x2', ' ', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xE8', '\x3', '\x2', '\x2', '\x2', '$', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xF8', '\x3', '\x2', '\x2', '\x2', '(', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		',', '\x127', '\x3', '\x2', '\x2', '\x2', '.', '\x141', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x143', '\x3', '\x2', '\x2', '\x2', '\x32', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x171', '\x3', '\x2', '\x2', '\x2', '\x38', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x17D', '\x3', '\x2', '\x2', '\x2', '<', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', '\x4', '\x3', '\x2', '?', 
		'@', '\a', '\x2', '\x2', '\x3', '@', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '\x45', '\x5', '\x6', '\x4', '\x2', '\x42', '\x44', '\x5', '\f', 
		'\a', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', 
		'\x18', '\x2', '\x2', 'I', 'J', '\a', '\n', '\x2', '\x2', 'J', 'K', '\x5', 
		'\b', '\x5', '\x2', 'K', 'L', '\a', '\v', '\x2', '\x2', 'L', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\a', '\x1A', '\x2', '\x2', 'N', 'O', '\a', 
		'\x1F', '\x2', '\x2', 'O', 'Q', '\a', '\n', '\x2', '\x2', 'P', 'R', '\x5', 
		'\n', '\x6', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 
		'\v', '\x2', '\x2', 'V', 'W', '\a', '\x6', '\x2', '\x2', 'W', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\x5', '\x38', '\x1D', '\x2', 'Y', '_', 
		'\a', '%', '\x2', '\x2', 'Z', '[', '\x5', '\x38', '\x1D', '\x2', '[', 
		'\\', '\a', '\x1C', '\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', 
		']', 'Z', '\x3', '\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\x5', '\x38', '\x1D', '\x2', '\x63', '\x64', 
		'\a', '\x6', '\x2', '\x2', '\x64', '\v', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'j', '\x5', '\x10', '\t', '\x2', '\x66', 'j', '\x5', '\xE', '\b', '\x2', 
		'g', 'j', '\x5', '\x12', '\n', '\x2', 'h', 'j', '\x5', '\x14', '\v', '\x2', 
		'i', '\x65', '\x3', '\x2', '\x2', '\x2', 'i', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\r', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\b', '\b', '\x1', 
		'\x2', 'l', 'm', '\a', '\f', '\x2', '\x2', 'm', 'n', '\x5', '\xE', '\b', 
		'\x2', 'n', 'o', '\a', '\r', '\x2', '\x2', 'o', 's', '\x3', '\x2', '\x2', 
		'\x2', 'p', 's', '\x5', '\x38', '\x1D', '\x2', 'q', 's', '\a', ')', '\x2', 
		'\x2', 'r', 'k', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', '|', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\f', '\a', '\x2', '\x2', 'u', 'v', '\t', '\x2', '\x2', 
		'\x2', 'v', '{', '\x5', '\xE', '\b', '\b', 'w', 'x', '\f', '\x6', '\x2', 
		'\x2', 'x', 'y', '\t', '\x3', '\x2', '\x2', 'y', '{', '\x5', '\xE', '\b', 
		'\a', 'z', 't', '\x3', '\x2', '\x2', '\x2', 'z', 'w', '\x3', '\x2', '\x2', 
		'\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x85', '\x5', 
		'\x16', '\f', '\x2', '\x80', '\x85', '\x5', '\x18', '\r', '\x2', '\x81', 
		'\x85', '\x5', '\x1A', '\xE', '\x2', '\x82', '\x85', '\x5', '\"', '\x12', 
		'\x2', '\x83', '\x85', '\x5', '$', '\x13', '\x2', '\x84', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x80', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x8B', '\x5', '(', '\x15', '\x2', '\x87', 
		'\x8B', '\x5', '*', '\x16', '\x2', '\x88', '\x8B', '\x5', ',', '\x17', 
		'\x2', '\x89', '\x8B', '\x5', '.', '\x18', '\x2', '\x8A', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x13', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x5', 
		'\x30', '\x19', '\x2', '\x8D', '\x8E', '\a', '\x6', '\x2', '\x2', '\x8E', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x32', '\x1A', 
		'\x2', '\x90', '\x91', '\a', '\x6', '\x2', '\x2', '\x91', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x93', '\x5', '\x34', '\x1B', '\x2', '\x93', 
		'\x94', '\a', '\x6', '\x2', '\x2', '\x94', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x92', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x97', '\xA0', '\a', '\x4', '\x2', 
		'\x2', '\x98', '\x9B', '\x5', ':', '\x1E', '\x2', '\x99', '\x9B', '\x5', 
		'\x38', '\x1D', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '#', '\x2', '\x2', '\x9D', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA6', '\x5', ':', '\x1E', '\x2', '\xA4', '\xA6', '\x5', '\x38', '\x1D', 
		'\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\x6', '\x2', '\x2', '\xA8', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xB2', '\a', '\x10', '\x2', '\x2', '\xAA', '\xAD', '\x5', 
		':', '\x1E', '\x2', '\xAB', '\xAD', '\x5', '\x38', '\x1D', '\x2', '\xAC', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'#', '\x2', '\x2', '\xAF', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x5', ':', '\x1E', 
		'\x2', '\xB6', '\xB8', '\x5', '\x38', '\x1D', '\x2', '\xB7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\a', '\x6', '\x2', 
		'\x2', '\xBA', '\x19', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBF', '\x5', 
		'\x1C', '\xF', '\x2', '\xBC', '\xBE', '\x5', '\x1E', '\x10', '\x2', '\xBD', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC4', '\x5', ' ', '\x11', 
		'\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\x6', '\x2', '\x2', '\xC6', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\x12', '\x2', '\x2', '\xC8', '\xC9', '\a', 
		'\f', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\x36', '\x1C', '\x2', '\xCA', 
		'\xCB', '\a', '\r', '\x2', '\x2', '\xCB', '\xCD', '\a', '\n', '\x2', '\x2', 
		'\xCC', '\xCE', '\x5', '\f', '\a', '\x2', '\xCD', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\v', 
		'\x2', '\x2', '\xD2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', 
		'\a', '\x14', '\x2', '\x2', '\xD4', '\xD5', '\a', '\f', '\x2', '\x2', 
		'\xD5', '\xD6', '\x5', '\x36', '\x1C', '\x2', '\xD6', '\xD7', '\a', '\r', 
		'\x2', '\x2', '\xD7', '\xD9', '\a', '\n', '\x2', '\x2', '\xD8', '\xDA', 
		'\x5', '\f', '\a', '\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\v', '\x2', '\x2', 
		'\xDE', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x13', 
		'\x2', '\x2', '\xE0', '\xE2', '\a', '\n', '\x2', '\x2', '\xE1', '\xE3', 
		'\x5', '\f', '\a', '\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\v', '\x2', '\x2', 
		'\xE7', '!', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\a', '\b', '\x2', 
		'\x2', '\xE9', '\xEA', '\x5', '\x38', '\x1D', '\x2', '\xEA', '\xEB', '\a', 
		'\x6', '\x2', '\x2', '\xEB', '#', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '\x1B', '\x2', '\x2', '\xED', '\xEF', '\a', '\n', '\x2', 
		'\x2', '\xEE', '\xF0', '\x5', '&', '\x14', '\x2', '\xEF', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', 
		'\v', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x6', '\x2', '\x2', '\xF5', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', '\x5', '\x38', '\x1D', 
		'\x2', '\xF7', '\xF9', '\x5', ':', '\x1E', '\x2', '\xF8', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\a', '\n', '\x2', 
		'\x2', '\xFB', '\xFD', '\x5', '\f', '\a', '\x2', '\xFC', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\a', '\v', '\x2', '\x2', '\x101', '\x102', '\a', '\x6', '\x2', '\x2', 
		'\x102', '\'', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x5', '\x38', 
		'\x1D', '\x2', '\x104', '\x105', '\t', '\x4', '\x2', '\x2', '\x105', '\x106', 
		'\x5', '\xE', '\b', '\x2', '\x106', '\x107', '\a', '\x6', '\x2', '\x2', 
		'\x107', '\x112', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x5', 
		'\x30', '\x19', '\x2', '\x109', '\x10A', '\a', '\x1F', '\x2', '\x2', '\x10A', 
		'\x10B', '\x5', '\xE', '\b', '\x2', '\x10B', '\x10C', '\a', '\x6', '\x2', 
		'\x2', '\x10C', '\x112', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', 
		'\x5', '\x30', '\x19', '\x2', '\x10E', '\x10F', '\a', '\x1F', '\x2', '\x2', 
		'\x10F', '\x110', '\x5', '\x18', '\r', '\x2', '\x110', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x103', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', '\x112', ')', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x5', 
		'\x38', '\x1D', '\x2', '\x114', '\x115', '\a', '\x1F', '\x2', '\x2', '\x115', 
		'\x116', '\x5', ':', '\x1E', '\x2', '\x116', '\x117', '\a', '\x6', '\x2', 
		'\x2', '\x117', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x5', '\x32', '\x1A', '\x2', '\x119', '\x11A', '\a', '\x1F', '\x2', '\x2', 
		'\x11A', '\x11B', '\x5', ':', '\x1E', '\x2', '\x11B', '\x11C', '\a', '\x6', 
		'\x2', '\x2', '\x11C', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '+', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x5', '\x38', 
		'\x1D', '\x2', '\x120', '\x121', '\a', '\x1F', '\x2', '\x2', '\x121', 
		'\x122', '\x5', '\x18', '\r', '\x2', '\x122', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\x5', '\x32', '\x1A', '\x2', '\x124', '\x125', 
		'\a', '\x1F', '\x2', '\x2', '\x125', '\x126', '\x5', '\x18', '\r', '\x2', 
		'\x126', '\x128', '\x3', '\x2', '\x2', '\x2', '\x127', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x123', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x5', '\x38', '\x1D', 
		'\x2', '\x12A', '\x12B', '\a', '\x1F', '\x2', '\x2', '\x12B', '\x12F', 
		'\a', '\n', '\x2', '\x2', '\x12C', '\x12E', '\x5', '\f', '\a', '\x2', 
		'\x12D', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', 
		'\a', '\v', '\x2', '\x2', '\x133', '\x134', '\a', '\x6', '\x2', '\x2', 
		'\x134', '\x142', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x5', 
		'\x34', '\x1B', '\x2', '\x136', '\x137', '\a', '\x1F', '\x2', '\x2', '\x137', 
		'\x13B', '\a', '\n', '\x2', '\x2', '\x138', '\x13A', '\x5', '\f', '\a', 
		'\x2', '\x139', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13F', '\a', '\v', '\x2', '\x2', '\x13F', '\x140', '\a', '\x6', '\x2', 
		'\x2', '\x140', '\x142', '\x3', '\x2', '\x2', '\x2', '\x141', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '/', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\a', '\x11', 
		'\x2', '\x2', '\x144', '\x145', '\x5', '\x38', '\x1D', '\x2', '\x145', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\a', '\x5', '\x2', 
		'\x2', '\x147', '\x148', '\x5', '\x38', '\x1D', '\x2', '\x148', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\a', '\x17', '\x2', '\x2', 
		'\x14A', '\x14B', '\x5', '\x38', '\x1D', '\x2', '\x14B', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x14C', '\x165', '\b', '\x1C', '\x1', '\x2', '\x14D', 
		'\x14E', '\x5', '\x38', '\x1D', '\x2', '\x14E', '\x14F', '\a', '\x1D', 
		'\x2', '\x2', '\x14F', '\x150', '\x5', ':', '\x1E', '\x2', '\x150', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x5', ':', '\x1E', '\x2', 
		'\x152', '\x153', '\a', '\x1D', '\x2', '\x2', '\x153', '\x154', '\x5', 
		'\x38', '\x1D', '\x2', '\x154', '\x166', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x156', '\x5', '\x38', '\x1D', '\x2', '\x156', '\x157', '\t', '\x5', 
		'\x2', '\x2', '\x157', '\x158', '\x5', '\x38', '\x1D', '\x2', '\x158', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x5', '\x38', 
		'\x1D', '\x2', '\x15A', '\x15B', '\t', '\x5', '\x2', '\x2', '\x15B', '\x15C', 
		'\x5', '\xE', '\b', '\x2', '\x15C', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15E', '\x5', '\xE', '\b', '\x2', '\x15E', '\x15F', '\t', '\x5', 
		'\x2', '\x2', '\x15F', '\x160', '\x5', '\x38', '\x1D', '\x2', '\x160', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x5', '\xE', '\b', 
		'\x2', '\x162', '\x163', '\t', '\x5', '\x2', '\x2', '\x163', '\x164', 
		'\x5', '\xE', '\b', '\x2', '\x164', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x165', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x155', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x165', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x161', '\x3', '\x2', '\x2', '\x2', '\x166', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x5', '\x38', '\x1D', '\x2', 
		'\x168', '\x169', '\a', '\x1D', '\x2', '\x2', '\x169', '\x16A', '\x5', 
		'<', '\x1F', '\x2', '\x16A', '\x172', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x16C', '\x5', '<', '\x1F', '\x2', '\x16C', '\x16D', '\a', '\x1D', '\x2', 
		'\x2', '\x16D', '\x16E', '\x5', '\x38', '\x1D', '\x2', '\x16E', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x172', '\x5', '\x38', '\x1D', '\x2', 
		'\x170', '\x172', '\x5', '<', '\x1F', '\x2', '\x171', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x167', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\f', '\a', '\x2', '\x2', 
		'\x174', '\x175', '\t', '\x6', '\x2', '\x2', '\x175', '\x177', '\x5', 
		'\x36', '\x1C', '\b', '\x176', '\x173', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x17A', '\x3', '\x2', '\x2', '\x2', '\x178', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', '\x179', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17C', '\a', '*', '\x2', '\x2', '\x17C', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x17D', '\x17E', '\a', '\a', '\x2', '\x2', '\x17E', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\a', '(', '\x2', '\x2', 
		'\x180', '=', '\x3', '\x2', '\x2', '\x2', '#', '\x45', 'S', '_', 'i', 
		'r', 'z', '|', '\x84', '\x8A', '\x95', '\x9A', '\xA0', '\xA5', '\xAC', 
		'\xB2', '\xB7', '\xBF', '\xC3', '\xCF', '\xDB', '\xE4', '\xF1', '\xF8', 
		'\xFE', '\x111', '\x11D', '\x127', '\x12F', '\x13B', '\x141', '\x165', 
		'\x171', '\x178',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
