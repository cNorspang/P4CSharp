//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BetterAdvGm.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class BetterAdvGmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, KEYWORD_TEXT=2, KEYWORD_STRING=3, END_STMT=4, STRING=5, 
		TRAVEL_KEYWORD=6, INCREMENT=7, CURLY_LEFT=8, CURLY_RIGHT=9, PAREN_LEFT=10, 
		PAREN_RIGHT=11, SQUARE_LEFT=12, SQUARE_RIGHT=13, KEYWORD_BOOL=14, KEYWORD_INPUT=15, 
		KEYWORD_INT=16, KEYWORD_IF=17, KEYWORD_ELSE=18, KEYWORD_ELSEIF=19, KEYWORD_WHILE=20, 
		KEYWORD_FOR=21, KEYWORD_LOCATION=22, KEYWORD_SETUP=23, KEYWORD_PLAYER=24, 
		KEYWORD_LOCATIONARRAY=25, KEYWORD_LOCATIONS=26, KEYWORD_CHOICE=27, COMMA_SEPERATOR=28, 
		DOT=29, BOOL_CMP_OPERATOR=30, CMP_OPERATOR=31, ASSIGN_OPERATOR=32, COMPOUND_OPERATOR=33, 
		TIMES_OPERATOR=34, DIVISION_OPERATOR=35, PLUS_OPERATOR=36, MINUS_OPERATOR=37, 
		ARROW_OPERATOR=38, AND_OPERATOR=39, OR_OPERATOR=40, BOOL=41, NUM=42, VAR_NAME=43;
	public const int
		RULE_prog = 0, RULE_buffernode = 1, RULE_setup = 2, RULE_locationsetup = 3, 
		RULE_locationmapping = 4, RULE_playersetup = 5, RULE_inBlock = 6, RULE_expression = 7, 
		RULE_statement = 8, RULE_assign = 9, RULE_declaration = 10, RULE_text_statement = 11, 
		RULE_input_statement = 12, RULE_if_chain_statement = 13, RULE_if_statement = 14, 
		RULE_else_if_statement = 15, RULE_else_statement = 16, RULE_travel_statement = 17, 
		RULE_choice_statement = 18, RULE_option_statment = 19, RULE_while_statement = 20, 
		RULE_int_assign = 21, RULE_string_assign = 22, RULE_input_assign = 23, 
		RULE_location_assign = 24, RULE_bool_assign = 25, RULE_int_declaration = 26, 
		RULE_string_declaration = 27, RULE_location_declaration = 28, RULE_bool_declaration = 29, 
		RULE_predicate = 30, RULE_variable = 31, RULE_string_obj = 32, RULE_bool_obj = 33, 
		RULE_dot_notaion = 34;
	public static readonly string[] ruleNames = {
		"prog", "buffernode", "setup", "locationsetup", "locationmapping", "playersetup", 
		"inBlock", "expression", "statement", "assign", "declaration", "text_statement", 
		"input_statement", "if_chain_statement", "if_statement", "else_if_statement", 
		"else_statement", "travel_statement", "choice_statement", "option_statment", 
		"while_statement", "int_assign", "string_assign", "input_assign", "location_assign", 
		"bool_assign", "int_declaration", "string_declaration", "location_declaration", 
		"bool_declaration", "predicate", "variable", "string_obj", "bool_obj", 
		"dot_notaion"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'Text '", "'string '", "';'", null, "'Travel '", "'++'", 
		"'{'", "'}'", "'('", "')'", "'['", "']'", "'bool'", "'userInput'", "'int'", 
		"'if'", "'else'", "'else if'", "'while'", "'for'", "'Location'", "'setup'", 
		"'player'", "'LocationArray'", "'Locations'", "'choice'", "','", "'.'", 
		null, null, "'='", "'+='", "'*'", "'/'", "'+'", "'-'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "KEYWORD_TEXT", "KEYWORD_STRING", "END_STMT", "STRING", 
		"TRAVEL_KEYWORD", "INCREMENT", "CURLY_LEFT", "CURLY_RIGHT", "PAREN_LEFT", 
		"PAREN_RIGHT", "SQUARE_LEFT", "SQUARE_RIGHT", "KEYWORD_BOOL", "KEYWORD_INPUT", 
		"KEYWORD_INT", "KEYWORD_IF", "KEYWORD_ELSE", "KEYWORD_ELSEIF", "KEYWORD_WHILE", 
		"KEYWORD_FOR", "KEYWORD_LOCATION", "KEYWORD_SETUP", "KEYWORD_PLAYER", 
		"KEYWORD_LOCATIONARRAY", "KEYWORD_LOCATIONS", "KEYWORD_CHOICE", "COMMA_SEPERATOR", 
		"DOT", "BOOL_CMP_OPERATOR", "CMP_OPERATOR", "ASSIGN_OPERATOR", "COMPOUND_OPERATOR", 
		"TIMES_OPERATOR", "DIVISION_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
		"ARROW_OPERATOR", "AND_OPERATOR", "OR_OPERATOR", "BOOL", "NUM", "VAR_NAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BetterAdvGm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BetterAdvGmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BetterAdvGmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BetterAdvGmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public BuffernodeContext buffernode() {
			return GetRuleContext<BuffernodeContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(BetterAdvGmParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; buffernode();
			State = 71; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuffernodeContext : ParserRuleContext {
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public BuffernodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buffernode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterBuffernode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitBuffernode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuffernode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuffernodeContext buffernode() {
		BuffernodeContext _localctx = new BuffernodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_buffernode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; setup();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_WHILE) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0)) {
				{
				{
				State = 74; inBlock();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode KEYWORD_SETUP() { return GetToken(BetterAdvGmParser.KEYWORD_SETUP, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public LocationsetupContext locationsetup() {
			return GetRuleContext<LocationsetupContext>(0);
		}
		public PlayersetupContext playersetup() {
			return GetRuleContext<PlayersetupContext>(0);
		}
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(KEYWORD_SETUP);
			State = 81; Match(CURLY_LEFT);
			State = 82; locationsetup();
			State = 83; playersetup();
			State = 84; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationsetupContext : ParserRuleContext {
		public ITerminalNode KEYWORD_LOCATIONS() { return GetToken(BetterAdvGmParser.KEYWORD_LOCATIONS, 0); }
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public LocationmappingContext[] locationmapping() {
			return GetRuleContexts<LocationmappingContext>();
		}
		public LocationmappingContext locationmapping(int i) {
			return GetRuleContext<LocationmappingContext>(i);
		}
		public LocationsetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationsetup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterLocationsetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitLocationsetup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationsetup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationsetupContext locationsetup() {
		LocationsetupContext _localctx = new LocationsetupContext(Context, State);
		EnterRule(_localctx, 6, RULE_locationsetup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(KEYWORD_LOCATIONS);
			State = 87; Match(ASSIGN_OPERATOR);
			State = 88; Match(CURLY_LEFT);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 89; locationmapping();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEYWORD_PLAYER || _la==VAR_NAME );
			State = 94; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationmappingContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode ARROW_OPERATOR() { return GetToken(BetterAdvGmParser.ARROW_OPERATOR, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public ITerminalNode[] COMMA_SEPERATOR() { return GetTokens(BetterAdvGmParser.COMMA_SEPERATOR); }
		public ITerminalNode COMMA_SEPERATOR(int i) {
			return GetToken(BetterAdvGmParser.COMMA_SEPERATOR, i);
		}
		public LocationmappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationmapping; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterLocationmapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitLocationmapping(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationmapping(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationmappingContext locationmapping() {
		LocationmappingContext _localctx = new LocationmappingContext(Context, State);
		EnterRule(_localctx, 8, RULE_locationmapping);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; variable();
			State = 97; Match(ARROW_OPERATOR);
			State = 103;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 98; variable();
					State = 99; Match(COMMA_SEPERATOR);
					}
					} 
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 106; variable();
			State = 107; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayersetupContext : ParserRuleContext {
		public ITerminalNode KEYWORD_PLAYER() { return GetToken(BetterAdvGmParser.KEYWORD_PLAYER, 0); }
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public AssignContext[] assign() {
			return GetRuleContexts<AssignContext>();
		}
		public AssignContext assign(int i) {
			return GetRuleContext<AssignContext>(i);
		}
		public PlayersetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playersetup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterPlayersetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitPlayersetup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayersetup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlayersetupContext playersetup() {
		PlayersetupContext _localctx = new PlayersetupContext(Context, State);
		EnterRule(_localctx, 10, RULE_playersetup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; Match(KEYWORD_PLAYER);
			State = 110; Match(ASSIGN_OPERATOR);
			State = 111; Match(CURLY_LEFT);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 112; assign();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_STRING) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INT) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << VAR_NAME))) != 0) );
			State = 117; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InBlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InBlockContext inBlock() {
		InBlockContext _localctx = new InBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_inBlock);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 121; assign();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 122; declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode PAREN_LEFT() { return GetToken(BetterAdvGmParser.PAREN_LEFT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(BetterAdvGmParser.PAREN_RIGHT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode NUM() { return GetToken(BetterAdvGmParser.NUM, 0); }
		public ITerminalNode TIMES_OPERATOR() { return GetToken(BetterAdvGmParser.TIMES_OPERATOR, 0); }
		public ITerminalNode DIVISION_OPERATOR() { return GetToken(BetterAdvGmParser.DIVISION_OPERATOR, 0); }
		public ITerminalNode PLUS_OPERATOR() { return GetToken(BetterAdvGmParser.PLUS_OPERATOR, 0); }
		public ITerminalNode MINUS_OPERATOR() { return GetToken(BetterAdvGmParser.MINUS_OPERATOR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PAREN_LEFT:
				{
				State = 126; Match(PAREN_LEFT);
				State = 127; expression(0);
				State = 128; Match(PAREN_RIGHT);
				}
				break;
			case KEYWORD_PLAYER:
			case VAR_NAME:
				{
				State = 130; variable();
				}
				break;
			case NUM:
				{
				State = 131; Match(NUM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 140;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 134;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 135;
						_la = TokenStream.LA(1);
						if ( !(_la==TIMES_OPERATOR || _la==DIVISION_OPERATOR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 136; expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 137;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 138;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 139; expression(5);
						}
						break;
					}
					} 
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Text_statementContext text_statement() {
			return GetRuleContext<Text_statementContext>(0);
		}
		public Input_statementContext input_statement() {
			return GetRuleContext<Input_statementContext>(0);
		}
		public If_chain_statementContext if_chain_statement() {
			return GetRuleContext<If_chain_statementContext>(0);
		}
		public Travel_statementContext travel_statement() {
			return GetRuleContext<Travel_statementContext>(0);
		}
		public Choice_statementContext choice_statement() {
			return GetRuleContext<Choice_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; text_statement();
				}
				break;
			case KEYWORD_INPUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; input_statement();
				}
				break;
			case KEYWORD_IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; if_chain_statement();
				}
				break;
			case TRAVEL_KEYWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 148; travel_statement();
				}
				break;
			case KEYWORD_CHOICE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 149; choice_statement();
				}
				break;
			case KEYWORD_WHILE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 150; while_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public Int_assignContext int_assign() {
			return GetRuleContext<Int_assignContext>(0);
		}
		public String_assignContext string_assign() {
			return GetRuleContext<String_assignContext>(0);
		}
		public Bool_assignContext bool_assign() {
			return GetRuleContext<Bool_assignContext>(0);
		}
		public Input_assignContext input_assign() {
			return GetRuleContext<Input_assignContext>(0);
		}
		public Location_assignContext location_assign() {
			return GetRuleContext<Location_assignContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 18, RULE_assign);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; int_assign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; string_assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 155; bool_assign();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 156; input_assign();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 157; location_assign();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Int_declarationContext int_declaration() {
			return GetRuleContext<Int_declarationContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public String_declarationContext string_declaration() {
			return GetRuleContext<String_declarationContext>(0);
		}
		public Bool_declarationContext bool_declaration() {
			return GetRuleContext<Bool_declarationContext>(0);
		}
		public Location_declarationContext location_declaration() {
			return GetRuleContext<Location_declarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_declaration);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; int_declaration();
				State = 161; Match(END_STMT);
				}
				break;
			case KEYWORD_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 163; string_declaration();
				State = 164; Match(END_STMT);
				}
				break;
			case KEYWORD_BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 166; bool_declaration();
				State = 167; Match(END_STMT);
				}
				break;
			case KEYWORD_LOCATION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 169; location_declaration();
				State = 170; Match(END_STMT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Text_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_TEXT() { return GetToken(BetterAdvGmParser.KEYWORD_TEXT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public String_objContext[] string_obj() {
			return GetRuleContexts<String_objContext>();
		}
		public String_objContext string_obj(int i) {
			return GetRuleContext<String_objContext>(i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] PLUS_OPERATOR() { return GetTokens(BetterAdvGmParser.PLUS_OPERATOR); }
		public ITerminalNode PLUS_OPERATOR(int i) {
			return GetToken(BetterAdvGmParser.PLUS_OPERATOR, i);
		}
		public Text_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterText_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitText_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Text_statementContext text_statement() {
		Text_statementContext _localctx = new Text_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_text_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(KEYWORD_TEXT);
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 177;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 175; string_obj();
						}
						break;
					case KEYWORD_PLAYER:
					case VAR_NAME:
						{
						State = 176; variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 179; Match(PLUS_OPERATOR);
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 186; string_obj();
				}
				break;
			case KEYWORD_PLAYER:
			case VAR_NAME:
				{
				State = 187; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 190; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_INPUT() { return GetToken(BetterAdvGmParser.KEYWORD_INPUT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public String_objContext[] string_obj() {
			return GetRuleContexts<String_objContext>();
		}
		public String_objContext string_obj(int i) {
			return GetRuleContext<String_objContext>(i);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] PLUS_OPERATOR() { return GetTokens(BetterAdvGmParser.PLUS_OPERATOR); }
		public ITerminalNode PLUS_OPERATOR(int i) {
			return GetToken(BetterAdvGmParser.PLUS_OPERATOR, i);
		}
		public Input_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInput_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInput_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_statementContext input_statement() {
		Input_statementContext _localctx = new Input_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_input_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(KEYWORD_INPUT);
			State = 201;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 195;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
						{
						State = 193; string_obj();
						}
						break;
					case KEYWORD_PLAYER:
					case VAR_NAME:
						{
						State = 194; variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 197; Match(PLUS_OPERATOR);
					}
					} 
				}
				State = 203;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 204; string_obj();
				}
				break;
			case KEYWORD_PLAYER:
			case VAR_NAME:
				{
				State = 205; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 208; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_chain_statementContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Else_if_statementContext[] else_if_statement() {
			return GetRuleContexts<Else_if_statementContext>();
		}
		public Else_if_statementContext else_if_statement(int i) {
			return GetRuleContext<Else_if_statementContext>(i);
		}
		public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public If_chain_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_chain_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterIf_chain_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitIf_chain_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_chain_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_chain_statementContext if_chain_statement() {
		If_chain_statementContext _localctx = new If_chain_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_if_chain_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; if_statement();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEYWORD_ELSEIF) {
				{
				{
				State = 211; else_if_statement();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 217; else_statement();
				}
			}

			State = 220; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_IF() { return GetToken(BetterAdvGmParser.KEYWORD_IF, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(BetterAdvGmParser.PAREN_LEFT, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(BetterAdvGmParser.PAREN_RIGHT, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(KEYWORD_IF);
			State = 223; Match(PAREN_LEFT);
			State = 224; predicate(0);
			State = 225; Match(PAREN_RIGHT);
			State = 226; Match(CURLY_LEFT);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 227; inBlock();
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_WHILE) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 232; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_ELSEIF() { return GetToken(BetterAdvGmParser.KEYWORD_ELSEIF, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(BetterAdvGmParser.PAREN_LEFT, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(BetterAdvGmParser.PAREN_RIGHT, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public Else_if_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterElse_if_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitElse_if_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statementContext else_if_statement() {
		Else_if_statementContext _localctx = new Else_if_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_else_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(KEYWORD_ELSEIF);
			State = 235; Match(PAREN_LEFT);
			State = 236; predicate(0);
			State = 237; Match(PAREN_RIGHT);
			State = 238; Match(CURLY_LEFT);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 239; inBlock();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_WHILE) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 244; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_ELSE() { return GetToken(BetterAdvGmParser.KEYWORD_ELSE, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_else_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(KEYWORD_ELSE);
			State = 247; Match(CURLY_LEFT);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 248; inBlock();
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_WHILE) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 253; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Travel_statementContext : ParserRuleContext {
		public ITerminalNode TRAVEL_KEYWORD() { return GetToken(BetterAdvGmParser.TRAVEL_KEYWORD, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Travel_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_travel_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterTravel_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitTravel_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTravel_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Travel_statementContext travel_statement() {
		Travel_statementContext _localctx = new Travel_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_travel_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(TRAVEL_KEYWORD);
			State = 256; variable();
			State = 257; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Choice_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_CHOICE() { return GetToken(BetterAdvGmParser.KEYWORD_CHOICE, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Option_statmentContext[] option_statment() {
			return GetRuleContexts<Option_statmentContext>();
		}
		public Option_statmentContext option_statment(int i) {
			return GetRuleContext<Option_statmentContext>(i);
		}
		public Choice_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterChoice_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitChoice_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Choice_statementContext choice_statement() {
		Choice_statementContext _localctx = new Choice_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_choice_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; Match(KEYWORD_CHOICE);
			State = 260; Match(CURLY_LEFT);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 261; option_statment();
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << KEYWORD_PLAYER) | (1L << VAR_NAME))) != 0) );
			State = 266; Match(CURLY_RIGHT);
			State = 267; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_statmentContext : ParserRuleContext {
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public String_objContext string_obj() {
			return GetRuleContext<String_objContext>(0);
		}
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public Option_statmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_statment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterOption_statment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitOption_statment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_statment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_statmentContext option_statment() {
		Option_statmentContext _localctx = new Option_statmentContext(Context, State);
		EnterRule(_localctx, 38, RULE_option_statment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_PLAYER:
			case VAR_NAME:
				{
				State = 269; variable();
				}
				break;
			case STRING:
				{
				State = 270; string_obj();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 273; Match(CURLY_LEFT);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 274; inBlock();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_WHILE) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 279; Match(CURLY_RIGHT);
			State = 280; Match(END_STMT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode KEYWORD_WHILE() { return GetToken(BetterAdvGmParser.KEYWORD_WHILE, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(BetterAdvGmParser.PAREN_LEFT, 0); }
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(BetterAdvGmParser.PAREN_RIGHT, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(KEYWORD_WHILE);
			State = 283; Match(PAREN_LEFT);
			State = 284; predicate(0);
			State = 285; Match(PAREN_RIGHT);
			State = 286; Match(CURLY_LEFT);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 287; inBlock();
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_WHILE) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0) );
			State = 292; Match(CURLY_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Int_declarationContext int_declaration() {
			return GetRuleContext<Int_declarationContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public Input_statementContext input_statement() {
			return GetRuleContext<Input_statementContext>(0);
		}
		public ITerminalNode COMPOUND_OPERATOR() { return GetToken(BetterAdvGmParser.COMPOUND_OPERATOR, 0); }
		public Int_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInt_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInt_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_assignContext int_assign() {
		Int_assignContext _localctx = new Int_assignContext(Context, State);
		EnterRule(_localctx, 42, RULE_int_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 294; variable();
				State = 295;
				_la = TokenStream.LA(1);
				if ( !(_la==ASSIGN_OPERATOR || _la==COMPOUND_OPERATOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 296; expression(0);
				State = 297; Match(END_STMT);
				}
				break;
			case 2:
				{
				State = 299; int_declaration();
				State = 300; Match(ASSIGN_OPERATOR);
				State = 301; expression(0);
				State = 302; Match(END_STMT);
				}
				break;
			case 3:
				{
				State = 304; int_declaration();
				State = 305; Match(ASSIGN_OPERATOR);
				State = 306; input_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public String_objContext string_obj() {
			return GetRuleContext<String_objContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public String_declarationContext string_declaration() {
			return GetRuleContext<String_declarationContext>(0);
		}
		public String_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterString_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitString_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_assignContext string_assign() {
		String_assignContext _localctx = new String_assignContext(Context, State);
		EnterRule(_localctx, 44, RULE_string_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_PLAYER:
			case VAR_NAME:
				{
				State = 310; variable();
				State = 311; Match(ASSIGN_OPERATOR);
				State = 312; string_obj();
				State = 313; Match(END_STMT);
				}
				break;
			case KEYWORD_STRING:
				{
				State = 315; string_declaration();
				State = 316; Match(ASSIGN_OPERATOR);
				State = 317; string_obj();
				State = 318; Match(END_STMT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public Input_statementContext input_statement() {
			return GetRuleContext<Input_statementContext>(0);
		}
		public String_declarationContext string_declaration() {
			return GetRuleContext<String_declarationContext>(0);
		}
		public Input_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInput_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInput_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_assignContext input_assign() {
		Input_assignContext _localctx = new Input_assignContext(Context, State);
		EnterRule(_localctx, 46, RULE_input_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_PLAYER:
			case VAR_NAME:
				{
				State = 322; variable();
				State = 323; Match(ASSIGN_OPERATOR);
				State = 324; input_statement();
				}
				break;
			case KEYWORD_STRING:
				{
				State = 326; string_declaration();
				State = 327; Match(ASSIGN_OPERATOR);
				State = 328; input_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Location_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public ITerminalNode CURLY_LEFT() { return GetToken(BetterAdvGmParser.CURLY_LEFT, 0); }
		public ITerminalNode CURLY_RIGHT() { return GetToken(BetterAdvGmParser.CURLY_RIGHT, 0); }
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Location_declarationContext location_declaration() {
			return GetRuleContext<Location_declarationContext>(0);
		}
		public InBlockContext[] inBlock() {
			return GetRuleContexts<InBlockContext>();
		}
		public InBlockContext inBlock(int i) {
			return GetRuleContext<InBlockContext>(i);
		}
		public Location_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterLocation_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitLocation_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Location_assignContext location_assign() {
		Location_assignContext _localctx = new Location_assignContext(Context, State);
		EnterRule(_localctx, 48, RULE_location_assign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_PLAYER:
			case VAR_NAME:
				{
				State = 332; variable();
				State = 333; Match(ASSIGN_OPERATOR);
				State = 334; Match(CURLY_LEFT);
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_WHILE) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0)) {
					{
					{
					State = 335; inBlock();
					}
					}
					State = 340;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 341; Match(CURLY_RIGHT);
				State = 342; Match(END_STMT);
				}
				break;
			case KEYWORD_LOCATION:
				{
				State = 344; location_declaration();
				State = 345; Match(ASSIGN_OPERATOR);
				State = 346; Match(CURLY_LEFT);
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TEXT) | (1L << KEYWORD_STRING) | (1L << TRAVEL_KEYWORD) | (1L << PAREN_LEFT) | (1L << KEYWORD_BOOL) | (1L << KEYWORD_INPUT) | (1L << KEYWORD_INT) | (1L << KEYWORD_IF) | (1L << KEYWORD_WHILE) | (1L << KEYWORD_LOCATION) | (1L << KEYWORD_PLAYER) | (1L << KEYWORD_CHOICE) | (1L << NUM) | (1L << VAR_NAME))) != 0)) {
					{
					{
					State = 347; inBlock();
					}
					}
					State = 352;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 353; Match(CURLY_RIGHT);
				State = 354; Match(END_STMT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_assignContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(BetterAdvGmParser.ASSIGN_OPERATOR, 0); }
		public Bool_objContext bool_obj() {
			return GetRuleContext<Bool_objContext>(0);
		}
		public ITerminalNode END_STMT() { return GetToken(BetterAdvGmParser.END_STMT, 0); }
		public Bool_declarationContext bool_declaration() {
			return GetRuleContext<Bool_declarationContext>(0);
		}
		public Bool_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterBool_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitBool_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_assignContext bool_assign() {
		Bool_assignContext _localctx = new Bool_assignContext(Context, State);
		EnterRule(_localctx, 50, RULE_bool_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_PLAYER:
			case VAR_NAME:
				{
				State = 358; variable();
				State = 359; Match(ASSIGN_OPERATOR);
				State = 360; bool_obj();
				State = 361; Match(END_STMT);
				}
				break;
			case KEYWORD_BOOL:
				{
				State = 363; bool_declaration();
				State = 364; Match(ASSIGN_OPERATOR);
				State = 365; bool_obj();
				State = 366; Match(END_STMT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int_declarationContext : ParserRuleContext {
		public ITerminalNode KEYWORD_INT() { return GetToken(BetterAdvGmParser.KEYWORD_INT, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Int_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterInt_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitInt_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Int_declarationContext int_declaration() {
		Int_declarationContext _localctx = new Int_declarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_int_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(KEYWORD_INT);
			State = 371; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_declarationContext : ParserRuleContext {
		public ITerminalNode KEYWORD_STRING() { return GetToken(BetterAdvGmParser.KEYWORD_STRING, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public String_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterString_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitString_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_declarationContext string_declaration() {
		String_declarationContext _localctx = new String_declarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_string_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(KEYWORD_STRING);
			State = 374; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Location_declarationContext : ParserRuleContext {
		public ITerminalNode KEYWORD_LOCATION() { return GetToken(BetterAdvGmParser.KEYWORD_LOCATION, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Location_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_location_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterLocation_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitLocation_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocation_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Location_declarationContext location_declaration() {
		Location_declarationContext _localctx = new Location_declarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_location_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; Match(KEYWORD_LOCATION);
			State = 377; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_declarationContext : ParserRuleContext {
		public ITerminalNode KEYWORD_BOOL() { return GetToken(BetterAdvGmParser.KEYWORD_BOOL, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public Bool_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterBool_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitBool_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_declarationContext bool_declaration() {
		Bool_declarationContext _localctx = new Bool_declarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_bool_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(KEYWORD_BOOL);
			State = 380; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode BOOL_CMP_OPERATOR() { return GetToken(BetterAdvGmParser.BOOL_CMP_OPERATOR, 0); }
		public String_objContext string_obj() {
			return GetRuleContext<String_objContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CMP_OPERATOR() { return GetToken(BetterAdvGmParser.CMP_OPERATOR, 0); }
		public Bool_objContext bool_obj() {
			return GetRuleContext<Bool_objContext>(0);
		}
		public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public ITerminalNode AND_OPERATOR() { return GetToken(BetterAdvGmParser.AND_OPERATOR, 0); }
		public ITerminalNode OR_OPERATOR() { return GetToken(BetterAdvGmParser.OR_OPERATOR, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 407;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 383; variable();
					State = 384; Match(BOOL_CMP_OPERATOR);
					State = 385; string_obj();
					}
					break;
				case 2:
					{
					State = 387; string_obj();
					State = 388; Match(BOOL_CMP_OPERATOR);
					State = 389; variable();
					}
					break;
				case 3:
					{
					State = 391; variable();
					State = 392;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOL_CMP_OPERATOR || _la==CMP_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 393; variable();
					}
					break;
				case 4:
					{
					State = 395; variable();
					State = 396;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOL_CMP_OPERATOR || _la==CMP_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 397; expression(0);
					}
					break;
				case 5:
					{
					State = 399; expression(0);
					State = 400;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOL_CMP_OPERATOR || _la==CMP_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 401; variable();
					}
					break;
				case 6:
					{
					State = 403; expression(0);
					State = 404;
					_la = TokenStream.LA(1);
					if ( !(_la==BOOL_CMP_OPERATOR || _la==CMP_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 405; expression(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 409; variable();
				State = 410; Match(BOOL_CMP_OPERATOR);
				State = 411; bool_obj();
				}
				break;
			case 3:
				{
				State = 413; bool_obj();
				State = 414; Match(BOOL_CMP_OPERATOR);
				State = 415; variable();
				}
				break;
			case 4:
				{
				State = 417; variable();
				}
				break;
			case 5:
				{
				State = 418; bool_obj();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 426;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PredicateContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_predicate);
					State = 421;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 422;
					_la = TokenStream.LA(1);
					if ( !(_la==AND_OPERATOR || _la==OR_OPERATOR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 423; predicate(6);
					}
					} 
				}
				State = 428;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VAR_NAME() { return GetToken(BetterAdvGmParser.VAR_NAME, 0); }
		public Dot_notaionContext dot_notaion() {
			return GetRuleContext<Dot_notaionContext>(0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 62, RULE_variable);
		try {
			State = 431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR_NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429; Match(VAR_NAME);
				}
				break;
			case KEYWORD_PLAYER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 430; dot_notaion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_objContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(BetterAdvGmParser.STRING, 0); }
		public String_objContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterString_obj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitString_obj(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_obj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_objContext string_obj() {
		String_objContext _localctx = new String_objContext(Context, State);
		EnterRule(_localctx, 64, RULE_string_obj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_objContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(BetterAdvGmParser.BOOL, 0); }
		public Bool_objContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_obj; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterBool_obj(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitBool_obj(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_obj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_objContext bool_obj() {
		Bool_objContext _localctx = new Bool_objContext(Context, State);
		EnterRule(_localctx, 66, RULE_bool_obj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dot_notaionContext : ParserRuleContext {
		public ITerminalNode KEYWORD_PLAYER() { return GetToken(BetterAdvGmParser.KEYWORD_PLAYER, 0); }
		public ITerminalNode DOT() { return GetToken(BetterAdvGmParser.DOT, 0); }
		public ITerminalNode VAR_NAME() { return GetToken(BetterAdvGmParser.VAR_NAME, 0); }
		public Dot_notaionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dot_notaion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.EnterDot_notaion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBetterAdvGmListener typedListener = listener as IBetterAdvGmListener;
			if (typedListener != null) typedListener.ExitDot_notaion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBetterAdvGmVisitor<TResult> typedVisitor = visitor as IBetterAdvGmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDot_notaion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dot_notaionContext dot_notaion() {
		Dot_notaionContext _localctx = new Dot_notaionContext(Context, State);
		EnterRule(_localctx, 68, RULE_dot_notaion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(KEYWORD_PLAYER);
			State = 438; Match(DOT);
			State = 439; Match(VAR_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 30: return predicate_sempred((PredicateContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x1BC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'N', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', 'Q', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', ']', '\n', '\x5', '\r', 
		'\x5', '\xE', '\x5', '^', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'h', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'k', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x6', '\a', 't', '\n', '\a', '\r', '\a', '\xE', '\a', 'u', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '~', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x87', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '\x8F', '\n', '\t', '\f', '\t', '\xE', '\t', '\x92', 
		'\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x9A', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xA1', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\xAF', '\n', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xB4', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\xB8', '\n', '\r', '\f', '\r', '\xE', '\r', '\xBB', 
		'\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xBF', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xC6', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xCA', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xCD', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\xD1', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xD7', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xDA', '\v', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xDD', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x6', 
		'\x10', '\xE7', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\xE8', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', '\xF3', '\n', '\x11', 
		'\r', '\x11', '\xE', '\x11', '\xF4', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x6', '\x12', '\xFC', '\n', '\x12', 
		'\r', '\x12', '\xE', '\x12', '\xFD', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x6', '\x14', '\x109', '\n', '\x14', '\r', '\x14', 
		'\xE', '\x14', '\x10A', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x112', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x6', '\x15', '\x116', '\n', '\x15', '\r', '\x15', '\xE', 
		'\x15', '\x117', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x6', '\x16', '\x123', '\n', '\x16', '\r', '\x16', '\xE', '\x16', '\x124', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x137', '\n', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x143', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x14D', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\a', '\x1A', '\x153', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', 
		'\x156', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x15F', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x162', '\v', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x167', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x5', '\x1B', '\x173', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x19A', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x1A6', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\a', ' ', '\x1AB', '\n', ' ', '\f', ' ', '\xE', ' ', '\x1AE', '\v', 
		' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x1B2', '\n', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x2', '\x4', '\x10', '>', '%', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'\x2', '\a', '\x3', '\x2', '$', '%', '\x3', '\x2', '&', '\'', '\x3', '\x2', 
		'\"', '#', '\x3', '\x2', ' ', '!', '\x3', '\x2', ')', '*', '\x2', '\x1D1', 
		'\x2', 'H', '\x3', '\x2', '\x2', '\x2', '\x4', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'R', '\x3', '\x2', '\x2', '\x2', '\b', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x62', '\x3', '\x2', '\x2', '\x2', '\f', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '}', '\x3', '\x2', '\x2', '\x2', '\x10', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x16', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xB0', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xE0', '\x3', '\x2', '\x2', '\x2', ' ', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xF8', '\x3', '\x2', '\x2', '\x2', '$', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x111', '\x3', '\x2', '\x2', '\x2', '*', '\x11C', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x136', '\x3', '\x2', '\x2', '\x2', '.', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x166', '\x3', '\x2', '\x2', '\x2', '\x34', '\x172', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x174', '\x3', '\x2', '\x2', '\x2', '\x38', '\x177', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x17D', '\x3', '\x2', '\x2', '\x2', '>', '\x1A5', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x1B7', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', '\x4', '\x3', 
		'\x2', 'I', 'J', '\a', '\x2', '\x2', '\x3', 'J', '\x3', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'O', '\x5', '\x6', '\x4', '\x2', 'L', 'N', '\x5', '\xE', 
		'\b', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x5', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '\x19', '\x2', '\x2', 'S', 'T', '\a', 
		'\n', '\x2', '\x2', 'T', 'U', '\x5', '\b', '\x5', '\x2', 'U', 'V', '\x5', 
		'\f', '\a', '\x2', 'V', 'W', '\a', '\v', '\x2', '\x2', 'W', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x1C', '\x2', '\x2', 'Y', 'Z', '\a', 
		'\"', '\x2', '\x2', 'Z', '\\', '\a', '\n', '\x2', '\x2', '[', ']', '\x5', 
		'\n', '\x6', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\a', '\v', '\x2', '\x2', '\x61', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x63', '\x5', '@', '!', '\x2', '\x63', 'i', '\a', '(', '\x2', 
		'\x2', '\x64', '\x65', '\x5', '@', '!', '\x2', '\x65', '\x66', '\a', '\x1E', 
		'\x2', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', 
		'@', '!', '\x2', 'm', 'n', '\a', '\x6', '\x2', '\x2', 'n', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'p', '\a', '\x1A', '\x2', '\x2', 'p', 'q', '\a', 
		'\"', '\x2', '\x2', 'q', 's', '\a', '\n', '\x2', '\x2', 'r', 't', '\x5', 
		'\x14', '\v', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', 
		'\v', '\x2', '\x2', 'x', '\r', '\x3', '\x2', '\x2', '\x2', 'y', '~', '\x5', 
		'\x12', '\n', '\x2', 'z', '~', '\x5', '\x10', '\t', '\x2', '{', '~', '\x5', 
		'\x14', '\v', '\x2', '|', '~', '\x5', '\x16', '\f', '\x2', '}', 'y', '\x3', 
		'\x2', '\x2', '\x2', '}', 'z', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', 
		'\x2', '\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\b', '\t', '\x1', '\x2', 
		'\x80', '\x81', '\a', '\f', '\x2', '\x2', '\x81', '\x82', '\x5', '\x10', 
		'\t', '\x2', '\x82', '\x83', '\a', '\r', '\x2', '\x2', '\x83', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x5', '@', '!', '\x2', '\x85', 
		'\x87', '\a', ',', '\x2', '\x2', '\x86', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x90', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\f', '\a', '\x2', '\x2', '\x89', '\x8A', '\t', '\x2', '\x2', 
		'\x2', '\x8A', '\x8F', '\x5', '\x10', '\t', '\b', '\x8B', '\x8C', '\f', 
		'\x6', '\x2', '\x2', '\x8C', '\x8D', '\t', '\x3', '\x2', '\x2', '\x8D', 
		'\x8F', '\x5', '\x10', '\t', '\a', '\x8E', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x9A', '\x5', 
		'\x18', '\r', '\x2', '\x94', '\x9A', '\x5', '\x1A', '\xE', '\x2', '\x95', 
		'\x9A', '\x5', '\x1C', '\xF', '\x2', '\x96', '\x9A', '\x5', '$', '\x13', 
		'\x2', '\x97', '\x9A', '\x5', '&', '\x14', '\x2', '\x98', '\x9A', '\x5', 
		'*', '\x16', '\x2', '\x99', '\x93', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x99', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x96', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x9B', '\xA1', '\x5', ',', '\x17', 
		'\x2', '\x9C', '\xA1', '\x5', '.', '\x18', '\x2', '\x9D', '\xA1', '\x5', 
		'\x34', '\x1B', '\x2', '\x9E', '\xA1', '\x5', '\x30', '\x19', '\x2', '\x9F', 
		'\xA1', '\x5', '\x32', '\x1A', '\x2', '\xA0', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\x5', '\x36', '\x1C', '\x2', '\xA3', '\xA4', '\a', 
		'\x6', '\x2', '\x2', '\xA4', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x5', '\x38', '\x1D', '\x2', '\xA6', '\xA7', '\a', '\x6', '\x2', 
		'\x2', '\xA7', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x5', 
		'<', '\x1F', '\x2', '\xA9', '\xAA', '\a', '\x6', '\x2', '\x2', '\xAA', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x5', ':', '\x1E', 
		'\x2', '\xAC', '\xAD', '\a', '\x6', '\x2', '\x2', '\xAD', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAF', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB9', '\a', '\x4', '\x2', '\x2', '\xB1', 
		'\xB4', '\x5', '\x42', '\"', '\x2', '\xB2', '\xB4', '\x5', '@', '!', '\x2', 
		'\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
		'\a', '&', '\x2', '\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x5', '\x42', '\"', 
		'\x2', '\xBD', '\xBF', '\x5', '@', '!', '\x2', '\xBE', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x6', '\x2', 
		'\x2', '\xC1', '\x19', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xCB', '\a', 
		'\x11', '\x2', '\x2', '\xC3', '\xC6', '\x5', '\x42', '\"', '\x2', '\xC4', 
		'\xC6', '\x5', '@', '!', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\a', '&', '\x2', '\x2', '\xC8', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xD1', '\x5', '\x42', '\"', '\x2', '\xCF', '\xD1', '\x5', '@', 
		'!', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD3', '\a', '\x6', '\x2', '\x2', '\xD3', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD8', '\x5', '\x1E', '\x10', '\x2', '\xD5', '\xD7', 
		'\x5', ' ', '\x11', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDD', '\x5', '\"', '\x12', '\x2', '\xDC', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '\x6', '\x2', '\x2', 
		'\xDF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x13', 
		'\x2', '\x2', '\xE1', '\xE2', '\a', '\f', '\x2', '\x2', '\xE2', '\xE3', 
		'\x5', '>', ' ', '\x2', '\xE3', '\xE4', '\a', '\r', '\x2', '\x2', '\xE4', 
		'\xE6', '\a', '\n', '\x2', '\x2', '\xE5', '\xE7', '\x5', '\xE', '\b', 
		'\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEB', '\a', '\v', '\x2', '\x2', '\xEB', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\x15', '\x2', '\x2', '\xED', 
		'\xEE', '\a', '\f', '\x2', '\x2', '\xEE', '\xEF', '\x5', '>', ' ', '\x2', 
		'\xEF', '\xF0', '\a', '\r', '\x2', '\x2', '\xF0', '\xF2', '\a', '\n', 
		'\x2', '\x2', '\xF1', '\xF3', '\x5', '\xE', '\b', '\x2', '\xF2', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', 
		'\a', '\v', '\x2', '\x2', '\xF7', '!', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\a', '\x14', '\x2', '\x2', '\xF9', '\xFB', '\a', '\n', '\x2', 
		'\x2', '\xFA', '\xFC', '\x5', '\xE', '\b', '\x2', '\xFB', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', 
		'\v', '\x2', '\x2', '\x100', '#', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', '\b', '\x2', '\x2', '\x102', '\x103', '\x5', '@', '!', 
		'\x2', '\x103', '\x104', '\a', '\x6', '\x2', '\x2', '\x104', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\a', '\x1D', '\x2', '\x2', '\x106', 
		'\x108', '\a', '\n', '\x2', '\x2', '\x107', '\x109', '\x5', '(', '\x15', 
		'\x2', '\x108', '\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', '\v', '\x2', '\x2', '\x10D', 
		'\x10E', '\a', '\x6', '\x2', '\x2', '\x10E', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x112', '\x5', '@', '!', '\x2', '\x110', '\x112', '\x5', 
		'\x42', '\"', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x115', '\a', '\n', '\x2', '\x2', '\x114', '\x116', '\x5', 
		'\xE', '\b', '\x2', '\x115', '\x114', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\a', '\v', '\x2', '\x2', 
		'\x11A', '\x11B', '\a', '\x6', '\x2', '\x2', '\x11B', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x11C', '\x11D', '\a', '\x16', '\x2', '\x2', '\x11D', '\x11E', 
		'\a', '\f', '\x2', '\x2', '\x11E', '\x11F', '\x5', '>', ' ', '\x2', '\x11F', 
		'\x120', '\a', '\r', '\x2', '\x2', '\x120', '\x122', '\a', '\n', '\x2', 
		'\x2', '\x121', '\x123', '\x5', '\xE', '\b', '\x2', '\x122', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\a', '\v', '\x2', '\x2', '\x127', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x129', '\x5', '@', '!', '\x2', '\x129', '\x12A', '\t', 
		'\x4', '\x2', '\x2', '\x12A', '\x12B', '\x5', '\x10', '\t', '\x2', '\x12B', 
		'\x12C', '\a', '\x6', '\x2', '\x2', '\x12C', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12E', '\x5', '\x36', '\x1C', '\x2', '\x12E', '\x12F', 
		'\a', '\"', '\x2', '\x2', '\x12F', '\x130', '\x5', '\x10', '\t', '\x2', 
		'\x130', '\x131', '\a', '\x6', '\x2', '\x2', '\x131', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x132', '\x133', '\x5', '\x36', '\x1C', '\x2', '\x133', 
		'\x134', '\a', '\"', '\x2', '\x2', '\x134', '\x135', '\x5', '\x1A', '\xE', 
		'\x2', '\x135', '\x137', '\x3', '\x2', '\x2', '\x2', '\x136', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x132', '\x3', '\x2', '\x2', '\x2', '\x137', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x138', '\x139', '\x5', '@', '!', '\x2', '\x139', '\x13A', 
		'\a', '\"', '\x2', '\x2', '\x13A', '\x13B', '\x5', '\x42', '\"', '\x2', 
		'\x13B', '\x13C', '\a', '\x6', '\x2', '\x2', '\x13C', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\x13E', '\x5', '\x38', '\x1D', '\x2', '\x13E', 
		'\x13F', '\a', '\"', '\x2', '\x2', '\x13F', '\x140', '\x5', '\x42', '\"', 
		'\x2', '\x140', '\x141', '\a', '\x6', '\x2', '\x2', '\x141', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x143', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x144', '\x145', '\x5', '@', '!', '\x2', '\x145', '\x146', 
		'\a', '\"', '\x2', '\x2', '\x146', '\x147', '\x5', '\x1A', '\xE', '\x2', 
		'\x147', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x5', 
		'\x38', '\x1D', '\x2', '\x149', '\x14A', '\a', '\"', '\x2', '\x2', '\x14A', 
		'\x14B', '\x5', '\x1A', '\xE', '\x2', '\x14B', '\x14D', '\x3', '\x2', 
		'\x2', '\x2', '\x14C', '\x144', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x14F', '\x5', '@', '!', '\x2', '\x14F', '\x150', '\a', '\"', 
		'\x2', '\x2', '\x150', '\x154', '\a', '\n', '\x2', '\x2', '\x151', '\x153', 
		'\x5', '\xE', '\b', '\x2', '\x152', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x153', '\x156', '\x3', '\x2', '\x2', '\x2', '\x154', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x157', '\x158', '\a', '\v', '\x2', '\x2', '\x158', '\x159', '\a', 
		'\x6', '\x2', '\x2', '\x159', '\x167', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x15B', '\x5', ':', '\x1E', '\x2', '\x15B', '\x15C', '\a', '\"', '\x2', 
		'\x2', '\x15C', '\x160', '\a', '\n', '\x2', '\x2', '\x15D', '\x15F', '\x5', 
		'\xE', '\b', '\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\a', '\v', '\x2', '\x2', '\x164', '\x165', '\a', '\x6', 
		'\x2', '\x2', '\x165', '\x167', '\x3', '\x2', '\x2', '\x2', '\x166', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x33', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x5', 
		'@', '!', '\x2', '\x169', '\x16A', '\a', '\"', '\x2', '\x2', '\x16A', 
		'\x16B', '\x5', '\x44', '#', '\x2', '\x16B', '\x16C', '\a', '\x6', '\x2', 
		'\x2', '\x16C', '\x173', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', 
		'\x5', '<', '\x1F', '\x2', '\x16E', '\x16F', '\a', '\"', '\x2', '\x2', 
		'\x16F', '\x170', '\x5', '\x44', '#', '\x2', '\x170', '\x171', '\a', '\x6', 
		'\x2', '\x2', '\x171', '\x173', '\x3', '\x2', '\x2', '\x2', '\x172', '\x168', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x35', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\a', '\x12', 
		'\x2', '\x2', '\x175', '\x176', '\x5', '@', '!', '\x2', '\x176', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\a', '\x5', '\x2', '\x2', 
		'\x178', '\x179', '\x5', '@', '!', '\x2', '\x179', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x17B', '\a', '\x18', '\x2', '\x2', '\x17B', '\x17C', 
		'\x5', '@', '!', '\x2', '\x17C', ';', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17E', '\a', '\x10', '\x2', '\x2', '\x17E', '\x17F', '\x5', '@', '!', 
		'\x2', '\x17F', '=', '\x3', '\x2', '\x2', '\x2', '\x180', '\x199', '\b', 
		' ', '\x1', '\x2', '\x181', '\x182', '\x5', '@', '!', '\x2', '\x182', 
		'\x183', '\a', ' ', '\x2', '\x2', '\x183', '\x184', '\x5', '\x42', '\"', 
		'\x2', '\x184', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', 
		'\x5', '\x42', '\"', '\x2', '\x186', '\x187', '\a', ' ', '\x2', '\x2', 
		'\x187', '\x188', '\x5', '@', '!', '\x2', '\x188', '\x19A', '\x3', '\x2', 
		'\x2', '\x2', '\x189', '\x18A', '\x5', '@', '!', '\x2', '\x18A', '\x18B', 
		'\t', '\x5', '\x2', '\x2', '\x18B', '\x18C', '\x5', '@', '!', '\x2', '\x18C', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x5', '@', '!', 
		'\x2', '\x18E', '\x18F', '\t', '\x5', '\x2', '\x2', '\x18F', '\x190', 
		'\x5', '\x10', '\t', '\x2', '\x190', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x192', '\x5', '\x10', '\t', '\x2', '\x192', '\x193', '\t', 
		'\x5', '\x2', '\x2', '\x193', '\x194', '\x5', '@', '!', '\x2', '\x194', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x5', '\x10', 
		'\t', '\x2', '\x196', '\x197', '\t', '\x5', '\x2', '\x2', '\x197', '\x198', 
		'\x5', '\x10', '\t', '\x2', '\x198', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x181', '\x3', '\x2', '\x2', '\x2', '\x199', '\x185', '\x3', 
		'\x2', '\x2', '\x2', '\x199', '\x189', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x199', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x195', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x5', '@', '!', '\x2', 
		'\x19C', '\x19D', '\a', ' ', '\x2', '\x2', '\x19D', '\x19E', '\x5', '\x44', 
		'#', '\x2', '\x19E', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A0', 
		'\x5', '\x44', '#', '\x2', '\x1A0', '\x1A1', '\a', ' ', '\x2', '\x2', 
		'\x1A1', '\x1A2', '\x5', '@', '!', '\x2', '\x1A2', '\x1A6', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3', '\x1A6', '\x5', '@', '!', '\x2', '\x1A4', '\x1A6', 
		'\x5', '\x44', '#', '\x2', '\x1A5', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1AC', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1A8', '\f', '\a', '\x2', '\x2', '\x1A8', '\x1A9', '\t', 
		'\x6', '\x2', '\x2', '\x1A9', '\x1AB', '\x5', '>', ' ', '\b', '\x1AA', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B2', '\a', 
		'-', '\x2', '\x2', '\x1B0', '\x1B2', '\x5', '\x46', '$', '\x2', '\x1B1', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1B2', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\a', '\a', '\x2', '\x2', '\x1B4', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\a', '+', '\x2', '\x2', '\x1B6', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x1B7', '\x1B8', '\a', '\x1A', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\a', '\x1F', '\x2', '\x2', '\x1B9', '\x1BA', '\a', '-', '\x2', '\x2', 
		'\x1BA', 'G', '\x3', '\x2', '\x2', '\x2', '\'', 'O', '^', 'i', 'u', '}', 
		'\x86', '\x8E', '\x90', '\x99', '\xA0', '\xAE', '\xB3', '\xB9', '\xBE', 
		'\xC5', '\xCB', '\xD0', '\xD8', '\xDC', '\xE8', '\xF4', '\xFD', '\x10A', 
		'\x111', '\x117', '\x124', '\x136', '\x142', '\x14C', '\x154', '\x160', 
		'\x166', '\x172', '\x199', '\x1A5', '\x1AC', '\x1B1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
